
// Draw a diagonal strip of tiles.
for (int i=0; i<CHUNK_WIDTH/2; i++) {
    for (int j=0; j<i; j++) {
        if (in_bounds(j, j+i))
            draw(j, j+i);
    }
}


// Draw a diamond loop of tiles.
constexpr int CHUNK_MIDDLE = CHUNK_WIDTH/2;
for (i=0; i<CHUNK_WIDTH; i++) {
    // Converge after reaching the middle row.
    int d = (i < CHUNK_MIDDLE) ? (i) : (CHUNK_WIDTH-i);
    // Diverge from the center column.
    draw_tile_wall(CHUNK_MIDDLE-d, i);
    draw_tile_wall(CHUNK_MIDDLE+d, i);
}


// ************************************************************************************** //


// ENTITY HANDLES -------------------------------------------------------------;;
typedef struct handle {
    int16_t i,     // Index in entity byte array.
    int16_t users, // Num ents using this handle.
    int alive      // Whether the entity is marked for deletion.
};
constexpr int NUM_HANDLES = 2048;
struct handle handles[NUM_HANDLES];

// Give a handle to an entity. ---------------------------------------------------
handle* get_handle(ent* e) {
    // Iterate to first available handle.
    int h = -1;
    for (int i=0; i<NUM_HANDLES; i++)
        { if (handles[i].users == 0) {h=i; break;} }
    if (h == -1)
        { printf("\n*** Ran out of handles!!!\n"); exit(-1); }
    handels[h].users = 1;
    handels[h].i = e; //TODO set as entity's header segment index!
    handels[h].alive = 1;
    return h;
}

// Get an entity pointer from a handle. -----------------------------------------
int use_handle(int) {
    if (handles[i].alive == 0) { handles[i].users--; return handles[i].i; }
    else { return -1; }
}

// 



// ************************************************************************************** //


enum segment_types {
    SEG_HEAD, SEG_POS, SEG_CHUNK, SEG_VEL, SEG_DIR, SEG_ANIM, SEG_HEALTH, SEG_MOVETYPE,
};

constexpr uint8_t HEADER_BYTE = 255; // Marker for identifying header segments.
enum ent_flags {DRAWABLE, ANIMATABLE, MOVABLE, COLLIDABLE, DAMAGABLE, THINKABLE};

struct animation {       // Data for an entity's animation.
    uint16_t id;         // Enum value of the animation. (animation data is stored elsewhere)
    uint8_t frame;       // current frame of animation.
    uint8_t anim_tick;   // Tick the previous frame was drawn on.
    uint8_t flags;       // Flags for sprite animation. Looping, stopped, ect.
    float rotation;      // Rotation of the sprite.
};
enum animation_flags {LOOPING, PAUSED,};
struct seg_anim_flags {
    uint8_t flags;       // Flags for sprite animation. Looping, stopped, ect.
    uint8_t UNUSED;
    uint16_t ALSO_UNUSED;// More things can be added to this segment.
};


#define ENT_BASICS      \
    uint8_t type;       \
    uint8_t num_sprites;\
    uint16_t size;      \
    uint16_t handle;    \
    int flags;          \
    vec2f pos;          \
    vec2f vel;          \
    vec2f dir;          \
    vec2i chunk;        \
    int health;


struct ent_basic { ENT_BASICS; };

enum sprites {MONKEY, BANNANA, NUM_SPRITES};
struct my_entity {
    ENT_BASICS;
    struct sprites[NUM_SPRITES];
    int var_specific_to_this_entity_type;
};




// ************************************************************************************** //


//===================================================================// RAYCASTING //
#define MAX_RAYCAST_DISTANCE 1024
tile* cast_ray(chunk* chunk, vec2f pos, vec2f dir) {
    tile* cur_tile = nullptr;
    vec2i tile_pos;
    dir = dir.normalized();
    for (int i=0; i<MAX_RAYCAST_DISTANCE; i++) {
        pos = pos + dir * RSIZE/4; //------------- Step forward.
        tile_pos = vec2i{ (int)std::floor(pos.x/RSIZE + 0.5), (int)std::floor(pos.y/RSIZE + 0.5) }; //-- Cur tile.
        if (tile_pos.x < 0 || tile_pos.x >= CHUNK_WIDTH || tile_pos.y < 0 || tile_pos.y >= CHUNK_WIDTH) { break; }
        cur_tile = chunk->tiles[tile_pos.y][tile_pos.x];
        bool hit_wall = (cur_tile.wall_height > 0);
        if (hit_wall) { return cur_tile; }
    }
    return nullptr;
}




// ************************************************************************************** //


//==========================================================// Draw nearby chunks. //

vec2i c = p->chunk;
for (int y=c.y-1; y<c.y+2; y++) {
    for (int x=c.x-1; y<c.x+2; y++) {
        if (vec2i{x,y}.in_bounds(0,WORLD_WIDTH)) { draw_chunk(p, vec2i{x,y}) }
    }
}



// **************************************************************************************** //



e.tile                          //- Global tile (vec2i)

e.tile % CHUNK_WIDTH            //- Global tile to index in chunk.

main_world.get_tile(e.tile)     //- Global tile to actual tile data.

tile* world::get_tile(vec2i tile_i) {
    if (!tile_i.in_bounds(0, WORLD_WIDTH*CHUNK_WIDTH-1))
        return nullptr;
    vec2i chunk_i = tile_i / CHUNK_WIDTH;
    vec2i local_i = tile_i % CHUNK_WIDTH;
    return &tiles[chunk_i.y][chunk_i.x].tile[local_i.y][local_i.x];
}


// **************************************************************************************** //

//- Same offsets for any resolution.


IDEA:::::::::: Scale TILE_WIDTH based on the resolution!!! <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

MAX VIEWABLE AREA: 32x32




ONLY APPLY TILE_SCALE on the screen!! <<<<<<<<<<<<<<<<<<<<<<<<<
USE TILE_SCALE to make vertical_tiles_visible = 13.5
window.y / TILE_WIDTH * TILE_SCALE = 13.5
TILE_SCALE = 13.5 * TILE_WIDTH / window.y








































